---
import BaseLayout from '../layouts/BaseLayout.astro';
import PostCard from '../components/ui/PostCard.astro';
// FormattedDate is now used within PostCard
import ResponsiveImage from '../components/ui/ResponsiveImage.astro';
import '../styles/carousel-animations.css';
import { BLOG_CONFIG } from '../config/current-config';
import { getFeaturedPosts, getLatestPosts, getCategoryStats } from '../lib/content';
import type { BlogPost } from '../lib/content';

// Initialize with empty arrays to handle case where collection doesn't exist yet
let featuredPosts = [];
let latestPosts = [];
let categories = [];

try {
  // Get featured posts using the new utility
  featuredPosts = await getFeaturedPosts() as BlogPost[];
  
  const featuredPostIds = featuredPosts.map(post => post.id);
  latestPosts = await getLatestPosts(BLOG_CONFIG.layout.latestPostsOnHomepage ?? 6, featuredPostIds) as BlogPost[]; // Fetch configured number of latest posts, excluding featured ones

  // Get categories with stats
  const categoryStats = await getCategoryStats();
  categories = categoryStats.map(stat => stat.category);
} catch (error) {
  console.error('Error fetching posts for homepage:', error);
}

---

<BaseLayout
  title={BLOG_CONFIG.site.name}
  description={BLOG_CONFIG.site.description}
  image={BLOG_CONFIG.branding.ogImage}
>
  <!-- Hero section with background image -->
  <section class="hero-section bg-primary-50 dark:bg-gray-800 py-16 mb-2 relative"
    aria-label={typeof BLOG_CONFIG.layout.heroConfig.heroBackgroundImage !== 'string' 
      ? BLOG_CONFIG.layout.heroConfig.heroBackgroundImage?.alt 
      : 'Hero section'}>
    
    {/* Background image with proper sizing */}
    {typeof BLOG_CONFIG.layout.heroConfig.heroBackgroundImage === 'string' ? (
      <div class="absolute inset-0 z-0 overflow-hidden">
        <img 
          src={BLOG_CONFIG.layout.heroConfig.heroBackgroundImage}
          alt="Background"
          class="w-full h-full object-cover"
        />
      </div>
    ) : (
      <div class="absolute inset-0 z-0 overflow-hidden">
        <img 
          src={BLOG_CONFIG.layout.heroConfig.heroBackgroundImage?.src}
          alt={BLOG_CONFIG.layout.heroConfig.heroBackgroundImage?.alt || "Background"}
          width={BLOG_CONFIG.layout.heroConfig.heroBackgroundImage?.width}
          height={BLOG_CONFIG.layout.heroConfig.heroBackgroundImage?.height}
          class="w-full h-full object-cover"
        />
      </div>
    )}
    
    {/* Text overlay matched to theme - white in light mode, dark in dark mode */}
    <div class="absolute inset-0 bg-white dark:bg-black bg-opacity-80 dark:bg-opacity-70 z-0"></div>
    
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
      <div class="text-center">
        <h1 class="text-4xl md:text-5xl font-bold text-gray-900 dark:text-white mb-6">
          {BLOG_CONFIG.layout.heroConfig.title}
        </h1>
        <p class="text-xl text-gray-600 dark:text-gray-300 mb-8 max-w-3xl mx-auto">
          {BLOG_CONFIG.layout.heroConfig.subtitle}
        </p>
        <div class="flex justify-center space-x-4">
          {BLOG_CONFIG.layout.heroConfig.ctaButton1 && (
            <a href={BLOG_CONFIG.layout.heroConfig.ctaButton1.url} class="btn bg-primary-600 hover:bg-primary-700 text-white font-semibold py-2 px-6 rounded-md mr-4 shadow-md">
              {BLOG_CONFIG.layout.heroConfig.ctaButton1.text}
            </a>
          )}
          {BLOG_CONFIG.layout.heroConfig.ctaButton2 && (
            <a href={BLOG_CONFIG.layout.heroConfig.ctaButton2.url} class="btn bg-gray-100 hover:bg-gray-200 text-gray-900 dark:bg-gray-700 dark:hover:bg-gray-600 dark:text-white font-semibold py-2 px-6 rounded-md shadow-md border border-gray-300 dark:border-gray-600">
              {BLOG_CONFIG.layout.heroConfig.ctaButton2.text}
            </a>
          )}
        </div>
      </div>
    </div>
  </section>
  
  <!-- Featured posts section -->
  <section id="featured" class="pt-6">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
      <h2 class="inline-block text-3xl font-bold text-gray-900 dark:text-white mb-10 pb-2 border-b-2 border-primary-500 dark:border-primary-400 text-center md:text-left">Featured Articles</h2>
      
      <div class="carousel-container relative group">
        <!-- Scroll indicators -->
        <div class="scroll-indicator left" aria-hidden="true"></div>
        <div class="scroll-indicator right" aria-hidden="true"></div>
        
        <!-- Navigation buttons -->
        <button aria-label="Scroll left" class="carousel-nav-button prev carousel-prev">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-5 h-5 sm:w-6 sm:h-6 text-gray-700 dark:text-gray-300">
            <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5" />
          </svg>
        </button>
        
        <!-- Main carousel -->
        <div class="featured-carousel carousel flex overflow-x-auto space-x-4 sm:space-x-6 pb-4 -mx-4 px-4">
          {featuredPosts.map((post: BlogPost, index: number) => (
            <div class="carousel-card-container flex-none w-4/5 sm:w-1/2 md:w-1/3 lg:w-1/4 min-w-[280px] sm:min-w-[300px]" data-index={index}>
              <PostCard post={post} class="carousel-card" />
            </div>
          ))}
        </div>
        
        <button aria-label="Scroll right" class="carousel-nav-button next carousel-next">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-5 h-5 sm:w-6 sm:h-6 text-gray-700 dark:text-gray-300">
            <path stroke-linecap="round" stroke-linejoin="round" d="m8.25 4.5 7.5 7.5-7.5 7.5" />
          </svg>
        </button>
        
        <!-- Scroll position indicators - one per post -->
        <div class="scroll-dots featured-dots mt-4">
          {featuredPosts.map((_, i) => (
            <div class={`scroll-dot ${i === 0 ? 'active' : ''}`} data-index={i}>{i + 1}</div>
          ))}
        </div>
      </div>
      
    </div>
  </section>

  <!-- Latest Posts Section -->
  {latestPosts.length > 0 && (
    <section id="latest-posts" class="pt-6">
      <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        <h2 class="inline-block text-3xl font-bold text-gray-900 dark:text-white mb-10 pb-2 border-b-2 border-primary-500 dark:border-primary-400 text-center md:text-left">Latest Posts</h2>
        <div class="carousel-container relative group">
          <!-- Scroll indicators -->
          <div class="scroll-indicator left" aria-hidden="true"></div>
          <div class="scroll-indicator right" aria-hidden="true"></div>
          
          <!-- Navigation buttons -->
          <button aria-label="Scroll left" class="carousel-nav-button prev carousel-prev">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-5 h-5 sm:w-6 sm:h-6 text-gray-700 dark:text-gray-300">
              <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5" />
            </svg>
          </button>
          
          <!-- Main carousel -->
          <div class="latest-carousel carousel flex overflow-x-auto space-x-4 sm:space-x-6 pb-4 -mx-4 px-4">
            {latestPosts.map((post: BlogPost, index: number) => (
              <div class="carousel-card-container flex-none w-4/5 sm:w-1/2 md:w-1/3 lg:w-1/4 min-w-[280px] sm:min-w-[300px]" data-index={index}>
                <PostCard post={post} class="carousel-card" />
              </div>
            ))}
          </div>
          
          <button aria-label="Scroll right" class="carousel-nav-button next carousel-next">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-5 h-5 sm:w-6 sm:h-6 text-gray-700 dark:text-gray-300">
              <path stroke-linecap="round" stroke-linejoin="round" d="m8.25 4.5 7.5 7.5-7.5 7.5" />
            </svg>
          </button>
          
          <!-- Scroll position indicators - one per post -->
          <div class="scroll-dots latest-dots mt-4">
            {latestPosts.map((_, i) => (
              <div class={`scroll-dot ${i === 0 ? 'active' : ''}`} data-index={i}>{i + 1}</div>
            ))}
          </div>
        </div>
      </div>
    </section>
  )}

  <!-- View All Articles Button - Moved and Restyled -->
  <div class="text-center">
    <a 
      href="/posts/page/1" 
      class="mt-12 mb-8 inline-block bg-primary-600 hover:bg-primary-700 dark:bg-primary-500 dark:hover:bg-primary-600 text-white text-lg font-semibold px-8 py-3 rounded-lg shadow-md hover:shadow-lg transition-all duration-300 ease-in-out transform hover:-translate-y-1"
    >
      View All Articles
    </a>
  </div>
  
  <!-- Categories section -->
  <section class="py-12 bg-gray-50 dark:bg-gray-800">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
      <h2 class="text-3xl font-bold text-gray-900 dark:text-white mb-8">Categories</h2>
      
      <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
        {categories.map((category) => (
          <a 
            href={`/categories/${category.toLowerCase().replace(/\s+/g, '-')}/page/1`}
            class="bg-white dark:bg-gray-700 p-6 rounded-lg shadow-sm hover:shadow-md transition-shadow duration-300 flex flex-col justify-between h-full"
          >
            <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">{category}</h3>
            <span class="text-primary-600 dark:text-primary-400 font-medium mt-4">View Articles â†’</span>
          </a>
        ))}
      </div>
    </div>
  </section>
<style>
  /* Add CSS variables for theme colors */
  :root {
    --scroll-indicator-color: rgba(255, 255, 255, 0.15);
    --dot-active-color: #4B5563; /* gray-600 */
  }
  
  .dark {
    --scroll-indicator-color: rgba(0, 0, 0, 0.15);
    --dot-active-color: #E5E7EB; /* gray-200 */
  }
  
  /* Default carousel styles moved to carousel-animations.css */
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Function to set up carousel controls and interactions
    const setupCarousel = (carouselSelector) => {
      const carouselElement = document.querySelector(carouselSelector);
      if (!carouselElement) return;

      const carouselContainer = carouselElement.closest('.carousel-container');
      if (!carouselContainer) return;

      const prevButton = carouselContainer.querySelector('.carousel-prev');
      const nextButton = carouselContainer.querySelector('.carousel-next');
      const scrollDots = carouselContainer.querySelector('.scroll-dots');
      const cards = carouselElement.querySelectorAll('article.carousel-card');

      if (!prevButton || !nextButton) return;

      // Calculate card width for scrolling
      const getCardWidth = () => {
        const firstCardContainer = carouselElement.querySelector('.carousel-card-container');
        if (!firstCardContainer) return 300; // Default scroll amount
        const style = window.getComputedStyle(firstCardContainer);
        const marginRight = parseFloat(style.marginRight) || 0;
        return firstCardContainer.offsetWidth + marginRight;
      };

      // Button handlers
      prevButton.addEventListener('click', () => {
        carouselElement.scrollBy({ left: -getCardWidth(), behavior: 'smooth' });
        updateScrollIndicators();
      });

      nextButton.addEventListener('click', () => {
        carouselElement.scrollBy({ left: getCardWidth(), behavior: 'smooth' });
        updateScrollIndicators();
      });

      // Touch/drag scroll handling with click detection
      let isDragging = false;
      let startPositionX;
      let startScrollLeft;
      let dragDistance = 0;
      let startTime = 0;
      
      // Prevent drag from interfering with clicks
      const handleMouseDown = (e) => {
        // Skip if clicked on a link or a button
        if (e.target.closest('a') || e.target.closest('button')) {
          return;
        }
        
        isDragging = true;
        startPositionX = e.pageX;
        startScrollLeft = carouselElement.scrollLeft;
        dragDistance = 0;
        startTime = Date.now();
      };
      
      const handleMouseMove = (e) => {
        if (!isDragging) return;
        
        // Add dragging class only when actual movement occurs
        carouselElement.classList.add('is-dragging');
        
        // Calculate distance moved
        dragDistance = e.pageX - startPositionX;
        carouselElement.scrollLeft = startScrollLeft - dragDistance;
        
        // Explicitly prevent default only during actual drag
        if (Math.abs(dragDistance) > 5) {
          e.preventDefault();
        }
      };
      
      const handleMouseUp = (e) => {
        if (!isDragging) return;
        
        // Check if this was a click or a drag
        const isClick = Math.abs(dragDistance) < 5 && (Date.now() - startTime) < 300;
        
        isDragging = false;
        carouselElement.classList.remove('is-dragging');
        updateScrollIndicators();
        
        // Don't interfere with clicks
        if (isClick) {
          // This was a click, not a drag - do nothing to allow normal click behavior
        }
      };
      
      carouselElement.addEventListener('mousedown', handleMouseDown);
      window.addEventListener('mousemove', handleMouseMove);
      window.addEventListener('mouseup', handleMouseUp);
      
      carouselElement.addEventListener('mouseleave', () => {
        if (isDragging) {
          isDragging = false;
          carouselElement.classList.remove('is-dragging');
          updateScrollIndicators();
        }
      });

      // Update scroll dot indicators based on which post is most visible
      const updateScrollIndicators = () => {
        if (!scrollDots) return;
        
        // Get all card containers
        const cardContainers = carouselElement.querySelectorAll('.carousel-card-container');
        if (!cardContainers.length) return;
        
        // Find which card is most in view - with better calculation
        let mostVisibleCard = null;
        let highestVisiblePercentage = 0;
        let mostCenteredCard = null;
        let lowestCenterDistance = Infinity;
        
        // Calculate carousel center point
        const carouselRect = carouselElement.getBoundingClientRect();
        const carouselCenterX = carouselRect.left + (carouselRect.width / 2);
        
        cardContainers.forEach(card => {
          const rect = card.getBoundingClientRect();
          
          // Calculate both visibility and centeredness
          const cardCenterX = rect.left + (rect.width / 2);
          const centerDistance = Math.abs(cardCenterX - carouselCenterX);
          
          // Calculate how much of the card is in the carousel viewport
          const visibleLeft = Math.max(rect.left, carouselRect.left);
          const visibleRight = Math.min(rect.right, carouselRect.right);
          const visibleWidth = Math.max(0, visibleRight - visibleLeft);
          
          // Calculate percentage of card visible
          const visiblePercentage = visibleWidth / rect.width;
          
          // If card is largely visible (at least 30%) and is more centered than others
          if (visiblePercentage > 0.3 && centerDistance < lowestCenterDistance) {
            lowestCenterDistance = centerDistance;
            mostCenteredCard = card;
          }
          
          // Also track the most visible card as fallback
          if (visiblePercentage > highestVisiblePercentage) {
            highestVisiblePercentage = visiblePercentage;
            mostVisibleCard = card;
          }
        });
        
        // Prefer the most centered visible card, fall back to most visible
        const selectedCard = mostCenteredCard || mostVisibleCard;
        
        if (selectedCard) {
          // Get the index of the selected card
          const activeIndex = parseInt(selectedCard.getAttribute('data-index'), 10);
          
          // Update active dot
          const dots = scrollDots.querySelectorAll('.scroll-dot');
          dots.forEach((dot, i) => {
            dot.classList.toggle('active', i === activeIndex);
          });
          
          // Log for debugging (can be removed in production)
          // console.log(`Active card: ${activeIndex + 1} of ${dots.length}`);
        }
      };

      // Scroll on dot click - to specific post
      if (scrollDots) {
        scrollDots.querySelectorAll('.scroll-dot').forEach((dot, index) => {
          dot.addEventListener('click', () => {
            // Find the card container at that index
            const cardContainer = carouselElement.querySelector(`.carousel-card-container[data-index="${index}"]`);
            if (cardContainer) {
              // Scroll to this specific card
              const containerLeft = cardContainer.offsetLeft;
              const scrollOffset = containerLeft - (carouselElement.offsetWidth - cardContainer.offsetWidth) / 2;
              carouselElement.scrollTo({ left: scrollOffset, behavior: 'smooth' });
            }
          });
        });
      }

      // Set up intersection observer for focus effect (mobile only)
      const setupIntersectionObserver = () => {
        // Only set up on mobile devices
        if (window.innerWidth > 768) return;
        
        const options = {
          root: null, // Use viewport
          rootMargin: '0px',
          threshold: 0.7 // 70% visibility required
        };

        const intersectionCallback = (entries) => {
          entries.forEach(entry => {
            // Add/remove focus class based on intersection
            entry.target.classList.toggle('in-focus', entry.isIntersecting);
          });
        };

        const observer = new IntersectionObserver(intersectionCallback, options);
        
        // Observe all cards
        cards.forEach(card => observer.observe(card));
      };

      // Listen for scroll events to update indicators
      carouselElement.addEventListener('scroll', () => {
        updateScrollIndicators();
      });

      // Initialize
      setupIntersectionObserver();
      updateScrollIndicators();
    };

    // Set up both carousels
    setupCarousel('.featured-carousel');
    setupCarousel('.latest-carousel');
  });
</script>
</BaseLayout>
