---
import { getCollection, type CollectionEntry } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import { BLOG_CONFIG } from '../../config/current-config';
import { slugifyTag } from '../../lib/slugify';
import { SEO } from 'astro-seo';

// Initialize empty tags
let tags = [];

try {
  // Get all tags and count posts with each tag
  const allPosts: CollectionEntry<'posts'>[] = await getCollection('posts');
  
  if (allPosts && allPosts.length > 0) {
    // Count posts per tag
    const tagCounts = {};
    allPosts.forEach((post: CollectionEntry<'posts'>) => {
      if (post.data.tags && Array.isArray(post.data.tags)) {
        post.data.tags.forEach(tag => {
          tagCounts[tag] = (tagCounts[tag] || 0) + 1;
        });
      }
    });

    // Format tags for display
    tags = Object.entries(tagCounts).map(([tag, count]: [string, number]) => ({
      slug: slugifyTag(tag), // Use proper slugification for URLs
      name: tag, // Keep original tag name for display
      count
    })).sort((a: { slug: string; name: string; count: number }, b: { slug: string; name: string; count: number }) => b.count - a.count);
  }
} catch (error) {
  console.error('Error fetching tags:', error);
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<BaseLayout>
  <SEO
    slot="seo"
    title={`Tags | ${BLOG_CONFIG.site.name}`}
    description={`Browse all article tags on ${BLOG_CONFIG.site.name} to find content on specific investment topics.`}
    canonical={canonicalURL}
    openGraph={{
      basic: {
        title: `Tags | ${BLOG_CONFIG.site.name}`,
        type: 'website',
        image: '/og-image.jpg',
      }
    }}
  />

  <div class="py-12">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
      <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-8">
        Browse by Tag
      </h1>
      
      <div class="flex flex-wrap gap-4 mb-12">
        {tags.map(tag => (
          <a 
            href={`/tags/${tag.slug}`} 
            class="inline-block bg-white dark:bg-gray-800 rounded-full px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-200 shadow-sm hover:shadow-md transition-shadow"
          >
            {tag.name} 
            <span class="text-primary-600 dark:text-primary-400 ml-1">
              ({tag.count})
            </span>
          </a>
        ))}
      </div>
      
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
        <h2 class="text-xl font-bold text-gray-900 dark:text-white mb-4">Popular Tags</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {tags.slice(0, 9).map(tag => (
            <a 
              href={`/tags/${tag.slug}`}
              class="flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-700 rounded-md hover:bg-primary-50 dark:hover:bg-primary-900 transition-colors"
            >
              <span class="font-medium">{tag.name}</span>
              <span class="text-primary-600 dark:text-primary-400">{tag.count}</span>
            </a>
          ))}
        </div>
      </div>
    </div>
  </div>
</BaseLayout>
