---
import { getCollection, type CollectionEntry } from 'astro:content';
import BaseLayout from '../../../layouts/BaseLayout.astro';
import FormattedDate from '../../../components/ui/FormattedDate.astro';
import PageNavigation from '../../../components/features/PageNavigation.astro';
import ResponsiveImage from '../../../components/ui/ResponsiveImage.astro';
import { SEO } from 'astro-seo';
import { BLOG_CONFIG } from '../../../config/current-config';
import { slugifyTag } from '../../../lib/slugify';

export async function getStaticPaths({ paginate }) {
  // Get all posts to extract unique tags
  const allPosts = await getCollection('posts');
  
  // Get all unique tags from all posts
  const uniqueTags = [
    ...new Set(
      allPosts.flatMap((post: CollectionEntry<'posts'>) => post.data.tags)
    )
  ];
  
  // For each tag, create paginated pages
  return uniqueTags.flatMap(tag => {
    // Filter posts that contain this tag
    const filteredPosts = allPosts
      .filter((post: CollectionEntry<'posts'>) => post.data.tags.includes(tag))
      .sort((a: CollectionEntry<'posts'>, b: CollectionEntry<'posts'>) => b.data.date.valueOf() - a.data.date.valueOf());
    
    // Create a URL-safe slug for the tag
    const tagSlug = slugifyTag(tag);
    
    return paginate(filteredPosts, {
      params: { tag: tagSlug },
      pageSize: BLOG_CONFIG.layout.postPerPage,
      props: { tag, tagSlug } // Pass both the original tag and its slug
    });
  });
}

const { page, tag, tagSlug } = Astro.props;
const canonicalURL = new URL(Astro.url.pathname, Astro.site);

// Format tag for display

// Helper function to determine the display image URL
function getDisplayImage(post) {
  const placeholderImageUrl = `https://placehold.co/400x200?text=${encodeURIComponent(post.data.title.replace(/\s+/g, '+'))}`;
  let displayImage = post.data.heroImage || placeholderImageUrl;
  if (displayImage && !displayImage.startsWith('http') && !displayImage.startsWith('/images/uploads/')) {
    if (displayImage.startsWith('/')) {
      const parts = displayImage.split('/').filter(p => p);
      if (parts.length > 0) {
        displayImage = `/images/uploads/${parts.join('/')}`;
      }
    }
  }
  return displayImage;
}

// No need to format based on slug - use the original tag for display
const formattedTag = tag;
---

<BaseLayout>
  <SEO
    slot="seo"
    title={`${formattedTag} Articles - Page ${page.currentPage} | ${BLOG_CONFIG.site.name}`}
    description={`Browse all articles tagged with '${formattedTag}' - Page ${page.currentPage}`}
    canonical={canonicalURL}
    openGraph={{
      basic: {
        title: `${formattedTag} Articles - ${BLOG_CONFIG.site.name}`,
        type: 'website',
        image: `https://placehold.co/1200x630?text=${BLOG_CONFIG.site.name}+Blog+-+${encodeURIComponent(formattedTag)}`,
      }
    }}
  />

  <div class="py-12">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
      <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2">
        Tag: {formattedTag}
      </h1>
      <p class="text-gray-600 dark:text-gray-400 mb-8">
        Showing all articles tagged with '{formattedTag}'
      </p>
      
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        {page.data.map((post) => {
          return (
          <article class="bg-white dark:bg-gray-800 rounded-xl shadow-sm hover:shadow-xl transition-all duration-300 transform hover:translate-y-[-5px] overflow-hidden">
            <a href={`/posts/${post.slug}/`} class="no-underline block">
              <div class="overflow-hidden">
                <ResponsiveImage
                  src={getDisplayImage(post)}
                  alt={post.data.title}
                  class="w-full h-52 object-cover transition-transform duration-300 hover:scale-105"
                  width={320}
                  height={180}
                  sizes="320px"
                  loading="lazy"
                />
              </div>
              <div class="p-6">
                <span class="text-xs font-medium inline-block bg-primary-100 dark:bg-primary-900/50 text-primary-800 dark:text-primary-100 px-3 py-1 rounded-full mb-4">
                  {post.data.category}
                </span>
                
                <h2 class="text-xl font-bold text-gray-900 dark:text-white mb-3 line-clamp-2 group-hover:text-primary-600 dark:group-hover:text-primary-400 transition-colors">{post.data.title}</h2>
                <p class="text-gray-600 dark:text-gray-300 mb-4 line-clamp-3">{post.data.excerpt}</p>
                
                <div class="flex justify-between items-center pt-3 border-t border-gray-100 dark:border-gray-700">
                  <span class="text-sm text-primary-600 dark:text-primary-400 font-medium">Read more â†’</span>
                  <span class="text-xs text-gray-500 dark:text-gray-400">
                    <FormattedDate date={post.data.date} />
                  </span>
                </div>
              </div>
            </a>
          </article>
        )})}
      </div>
      
      <!-- Pagination Controls -->
      <PageNavigation page={page} />
    </div>
  </div>
</BaseLayout>
